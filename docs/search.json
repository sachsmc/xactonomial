[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 Michael C Sachs Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/example.html","id":"maximum-of-parameters","dir":"Articles","previous_headings":"","what":"Maximum of parameters","title":"Basic Examples","text":"two parameters equal, function nondifferentiable, bootstrap asymptotic methods fail method still works.","code":"psi_causal <- function(pp) {     max(pp)    }  true_psi_causal <- psi_causal(c(.4, .4, .2))  sample_data2 <- function(n) {      list(rmultinom(1, n, prob = c(.4, .4, .2))[, 1])    } cover_boot <- mclapply(1:200, run_one_bs, n = c(20), psi = psi_causal,                           true_psi = true_psi_causal, sample_data = sample_data2, mc.cores = detectCores() - 4) mean(unlist(cover_boot)) #> [1] 0.84  xmres <- mclapply(1:200, \\(i) {  #system.time({    data <- sample_data2(n = c(20))    results <- xactonomial(psi_causal, data, alpha = .05, psi_limits = c(0,1), maxit = 100, chunksize = 100)  #})  results$conf.int }, mc.cores = detectCores() - 2)  coverage_exact <- sapply(xmres, \\(cint) {   true_psi_causal >= cint[1] & true_psi_causal <= cint[2] })  mean(coverage_exact) #> [1] 0.99"},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Michael C Sachs. Author, maintainer. Michael P Fay. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Sachs M, Fay M (2025). xactonomial: Exact Inference Real-Valued Functionals k-Sample Multinomial Parameters. R package version 0.4.1, https://github.com/sachsmc/xactonomial.","code":"@Manual{,   title = {xactonomial: Exact Inference for Real-Valued Functionals of k-Sample Multinomial Parameters},   author = {Michael C Sachs and Michael P Fay},   year = {2025},   note = {R package version 0.4.1},   url = {https://github.com/sachsmc/xactonomial}, }"},{"path":"/index.html","id":"xactonomial","dir":"","previous_headings":"","what":"Exact Inference for Real-Valued Functionals of k-Sample Multinomial Parameters","title":"Exact Inference for Real-Valued Functionals of k-Sample Multinomial Parameters","text":"goal xactonomial use exact (computational stochastic) method compute confidence interval function calculation p values k sample multinomial setting interest real-valued functional multinomial probabilities.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Exact Inference for Real-Valued Functionals of k-Sample Multinomial Parameters","text":"can install development version xactonomial like : building package source requires local rust environment. Instead, pre-built binaries can found https://sachsmc.r-universe.dev/xactonomial used directly R ","code":"remotes::install_github(\"sachsmc/xactonomial\") install.packages(\"xactonomial\", repos = c('https://sachsmc.r-universe.dev', 'https://cloud.r-project.org'))"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Exact Inference for Real-Valued Functionals of k-Sample Multinomial Parameters","text":"basic example shows use main function:","code":"library(xactonomial)  psi_ba <- function(theta) {    theta1 <- theta[1:4]    theta2 <- theta[5:8]    sum(sqrt(theta1 * theta2))    }  data <- list(T1 = c(2,1,2,1), T2 = c(0,1,3,3)) xactonomial(psi_ba, data, psi_limits = c(0, 1), maxit = 5, chunksize = 20)"},{"path":"/reference/calc_prob_null.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate probability for given parameters — calc_prob_null","title":"Calculate probability for given parameters — calc_prob_null","text":"Given set candidate parameter vectors, check null \\(\\psi \\leq \\psi_0\\) satisfied, , compute probability element sample space","code":""},{"path":"/reference/calc_prob_null.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate probability for given parameters — calc_prob_null","text":"","code":"calc_prob_null(theta_cands, psi, psi0, minus1, SSpacearr, logC, II)"},{"path":"/reference/calc_prob_null.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate probability for given parameters — calc_prob_null","text":"theta_cands matrix samples rows parameters columns psi function interest mapping parameters real line psi0 null boundary testing psi <= psi0 minus1 Either plus minus 1 SSpacearr matrix sample space given size problem logC log multinomial coefficient element sample space II logical vector sample space psi extreme observed psi","code":""},{"path":"/reference/calc_prob_null.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate probability for given parameters — calc_prob_null","text":"numeric vector probabilities","code":""},{"path":"/reference/calc_prob_null2.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate probability for given parameters — calc_prob_null2","title":"Calculate probability for given parameters — calc_prob_null2","text":"Given set candidate parameter vectors, check null \\(\\psi \\leq \\psi_0\\) satisfied, , compute probability element sample space","code":""},{"path":"/reference/calc_prob_null2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate probability for given parameters — calc_prob_null2","text":"","code":"calc_prob_null2(   theta_cands,   psi,   psi0,   minus1,   SSpacearr,   logC,   II,   psi_v = FALSE )"},{"path":"/reference/calc_prob_null2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate probability for given parameters — calc_prob_null2","text":"theta_cands matrix samples rows parameters columns psi function interest mapping parameters real line psi0 null boundary testing psi <= psi0 minus1 Either plus minus 1 SSpacearr matrix sample space given size problem logC log multinomial coefficient element sample space II logical vector sample space psi extreme observed psi psi_v psi vectorized row?","code":""},{"path":"/reference/calc_prob_null2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate probability for given parameters — calc_prob_null2","text":"numeric vector probabilities","code":""},{"path":"/reference/calc_probs_rust.html","id":null,"dir":"Reference","previous_headings":"","what":"calculate multinomial probabilities — calc_probs_rust","title":"calculate multinomial probabilities — calc_probs_rust","text":"calculate multinomial probabilities","code":""},{"path":"/reference/calc_probs_rust.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"calculate multinomial probabilities — calc_probs_rust","text":"","code":"calc_probs_rust(sar, logt, logc, d, n, nt)"},{"path":"/reference/combinate.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate combinations of multinomials — combinate","title":"Calculate combinations of multinomials — combinate","text":"Calculate combinations multinomials","code":""},{"path":"/reference/combinate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate combinations of multinomials — combinate","text":"","code":"combinate(X, Y)"},{"path":"/reference/combinate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate combinations of multinomials — combinate","text":"X Matrix 1 Y Matrix 2","code":""},{"path":"/reference/combinate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate combinations of multinomials — combinate","text":"list arrays","code":""},{"path":"/reference/combinate2.html","id":null,"dir":"Reference","previous_headings":"","what":"Like combinate but add to existing — combinate2","title":"Like combinate but add to existing — combinate2","text":"Like combinate add existing","code":""},{"path":"/reference/combinate2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Like combinate but add to existing — combinate2","text":"","code":"combinate2(X, Y)"},{"path":"/reference/combinate2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Like combinate but add to existing — combinate2","text":"X list returned combinate Y Matrix 2","code":""},{"path":"/reference/combinate2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Like combinate but add to existing — combinate2","text":"list arrays","code":""},{"path":"/reference/expand_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a matrix of indices for all possible combinations of vectors of lengths — expand_index","title":"Get a matrix of indices for all possible combinations of vectors of lengths — expand_index","text":"basically expand.grid, faster integers","code":""},{"path":"/reference/expand_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a matrix of indices for all possible combinations of vectors of lengths — expand_index","text":"","code":"expand_index(lengths)"},{"path":"/reference/expand_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a matrix of indices for all possible combinations of vectors of lengths — expand_index","text":"lengths vector lengths index expand","code":""},{"path":"/reference/expand_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a matrix of indices for all possible combinations of vectors of lengths — expand_index","text":"matrix length(lengths) columns prod(lengths) rows","code":""},{"path":"/reference/expand_index.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a matrix of indices for all possible combinations of vectors of lengths — expand_index","text":"","code":"expand_index(c(2, 3, 4)) #>       Var1 Var2 Var3 #>  [1,]    1    1    1 #>  [2,]    2    1    1 #>  [3,]    1    2    1 #>  [4,]    2    2    1 #>  [5,]    1    3    1 #>  [6,]    2    3    1 #>  [7,]    1    1    2 #>  [8,]    2    1    2 #>  [9,]    1    2    2 #> [10,]    2    2    2 #> [11,]    1    3    2 #> [12,]    2    3    2 #> [13,]    1    1    3 #> [14,]    2    1    3 #> [15,]    1    2    3 #> [16,]    2    2    3 #> [17,]    1    3    3 #> [18,]    2    3    3 #> [19,]    1    1    4 #> [20,]    2    1    4 #> [21,]    1    2    4 #> [22,]    2    2    4 #> [23,]    1    3    4 #> [24,]    2    3    4 ## the same as expand.grid(1:2, 1:3, 1:4) #>    Var1 Var2 Var3 #> 1     1    1    1 #> 2     2    1    1 #> 3     1    2    1 #> 4     2    2    1 #> 5     1    3    1 #> 6     2    3    1 #> 7     1    1    2 #> 8     2    1    2 #> 9     1    2    2 #> 10    2    2    2 #> 11    1    3    2 #> 12    2    3    2 #> 13    1    1    3 #> 14    2    1    3 #> 15    1    2    3 #> 16    2    2    3 #> 17    1    3    3 #> 18    2    3    3 #> 19    1    1    4 #> 20    2    1    4 #> 21    1    2    4 #> 22    2    2    4 #> 23    1    3    4 #> 24    2    3    4"},{"path":"/reference/get_theta_random.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample from the unit simplex in d dimensions — get_theta_random","title":"Sample from the unit simplex in d dimensions — get_theta_random","text":"Sample unit simplex d dimensions","code":""},{"path":"/reference/get_theta_random.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample from the unit simplex in d dimensions — get_theta_random","text":"","code":"get_theta_random(d = 4, nsamp = 75)"},{"path":"/reference/get_theta_random.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample from the unit simplex in d dimensions — get_theta_random","text":"d dimension nsamp number samples take uniformly d space","code":""},{"path":"/reference/get_theta_random.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample from the unit simplex in d dimensions — get_theta_random","text":"grid Theta, parameter space. matrix d columns nsamp rows","code":""},{"path":"/reference/get_theta_random.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample from the unit simplex in d dimensions — get_theta_random","text":"","code":"get_theta_random(3, 10) #>              [,1]       [,2]       [,3] #>  [1,] 0.080750138 0.75358290 0.16566696 #>  [2,] 0.157208442 0.44355244 0.39923911 #>  [3,] 0.007399441 0.45899406 0.53360650 #>  [4,] 0.289767245 0.20801014 0.50222261 #>  [5,] 0.732881987 0.03963952 0.22747849 #>  [6,] 0.174940627 0.69966003 0.12539934 #>  [7,] 0.034241333 0.28614440 0.67961427 #>  [8,] 0.195669835 0.20665840 0.59767176 #>  [9,] 0.063661457 0.33987666 0.59646188 #> [10,] 0.388701313 0.58684652 0.02445216"},{"path":"/reference/itp_root.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the root of the function f — itp_root","title":"Find the root of the function f — itp_root","text":"finds value \\(x \\[, b]\\) \\(f(x) = 0\\) using one-dimensional root finding ITP method (Interpolate Truncate Project). Also see itp.","code":""},{"path":"/reference/itp_root.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the root of the function f — itp_root","text":"","code":"itp_root(   f,   a,   b,   k1 = 0.1,   k2 = 2,   n0 = 1,   eps = 0.005,   maxiter = 100,   fa = NULL,   fb = NULL,   verbose = FALSE,   ... )"},{"path":"/reference/itp_root.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the root of the function f — itp_root","text":"f function find root terms first (one-dimensional) argument lower limit b upper limit k1 tuning parameter k2 Another tuning parameter n0 Another tuning parameter eps Convergence tolerance maxiter Maximum number iterations fa value f(), NULL calculated fb value f(b), NULL calculated verbose Prints information iteration ... arguments passed f","code":""},{"path":"/reference/itp_root.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the root of the function f — itp_root","text":"numeric vector length 1, root last iteration","code":""},{"path":"/reference/itp_root.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Find the root of the function f — itp_root","text":". F. D. Oliveira R. H. C. Takahashi. 2020. Enhancement Bisection Method Average Performance Preserving Minmax Optimality. ACM Trans. Math. Softw. 47, 1, Article 5 (March 2021), 24 pages. https://doi.org/10.1145/3423597","code":""},{"path":"/reference/itp_root.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the root of the function f — itp_root","text":"","code":"fpoly <- function(x) x^3 - x - 2 ## example from the ITP_method wikipedia entry itp_root(fpoly, 1, 2, eps = .0001, verbose = TRUE) #> iteration:  0 candidate:  1.433333 , closest value:  -0.4886296  #> iteration:  1 candidate:  1.527131 , closest value:  0.03433833  #> iteration:  2 candidate:  1.520093 , closest value:  -0.007641477  #> iteration:  3 candidate:  1.521379 , closest value:  -4.253635e-06  #> iteration:  4 candidate:  1.521383 , closest value:  1.964979e-05  #> [1] 1.521381"},{"path":"/reference/log_multinom_coef.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate log of multinomial coefficient — log_multinom_coef","title":"Calculate log of multinomial coefficient — log_multinom_coef","text":"Calculate log multinomial coefficient","code":""},{"path":"/reference/log_multinom_coef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate log of multinomial coefficient — log_multinom_coef","text":"","code":"log_multinom_coef(x, sumx)"},{"path":"/reference/log_multinom_coef.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate log of multinomial coefficient — log_multinom_coef","text":"x Vector observed counts cell size Total count","code":""},{"path":"/reference/log_multinom_coef.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate log of multinomial coefficient — log_multinom_coef","text":"log multinomial coefficient","code":""},{"path":"/reference/log_multinom_coef.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate log of multinomial coefficient — log_multinom_coef","text":"","code":"#' @examples S0 <- sspace_multinom(4, 6) S1 <- sspace_multinom(4, 7) logC0<- apply(S0,1,log_multinom_coef,sumx=6) logC1<- apply(S1,1,log_multinom_coef,sumx=7) logC<- outer(logC0,logC1,'+')"},{"path":"/reference/pvalue_psi0.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a p value for the test of psi <= psi0 (lower = TRUE) or psi >= psi0 (lower = FALSE) — pvalue_psi0","title":"Compute a p value for the test of psi <= psi0 (lower = TRUE) or psi >= psi0 (lower = FALSE) — pvalue_psi0","text":"Compute p value test psi <= psi0 (lower = TRUE) psi >= psi0 (lower = FALSE)","code":""},{"path":"/reference/pvalue_psi0.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a p value for the test of psi <= psi0 (lower = TRUE) or psi >= psi0 (lower = FALSE) — pvalue_psi0","text":"","code":"pvalue_psi0(   psi0,   psi,   psi_hat,   psi_obs,   maxit,   chunksize,   lower = TRUE,   target,   SSpacearr,   logC,   d_k,   psi_v = FALSE )"},{"path":"/reference/pvalue_psi0.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a p value for the test of psi <= psi0 (lower = TRUE) or psi >= psi0 (lower = FALSE) — pvalue_psi0","text":"psi0 null value psi function interest psi_hat vector psi values element sample space psi_obs observed estimate maxit Maximum iterations chunksize Chunk size lower one sided test null less psi0, otherwise greater. target Stop algorithm p >= target (speed) SSpacearr sample space array logC log multinomial coefficient d_k vector dimensions psi_v psi vectorized row?","code":""},{"path":"/reference/pvalue_psi0.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a p value for the test of psi <= psi0 (lower = TRUE) or psi >= psi0 (lower = FALSE) — pvalue_psi0","text":"p-value","code":""},{"path":"/reference/rust_sspace.html","id":null,"dir":"Reference","previous_headings":"","what":"calculate sample space of a multinomial with dimension d and sample size n — rust_sspace","title":"calculate sample space of a multinomial with dimension d and sample size n — rust_sspace","text":"calculate sample space multinomial dimension d sample size n","code":""},{"path":"/reference/rust_sspace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"calculate sample space of a multinomial with dimension d and sample size n — rust_sspace","text":"","code":"rust_sspace(d, n)"},{"path":"/reference/sample_unit_simplex.html","id":null,"dir":"Reference","previous_headings":"","what":"Return a random sample from the d unit simplex — sample_unit_simplex","title":"Return a random sample from the d unit simplex — sample_unit_simplex","text":"Return random sample d unit simplex","code":""},{"path":"/reference/sample_unit_simplex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return a random sample from the d unit simplex — sample_unit_simplex","text":"","code":"sample_unit_simplex(d)"},{"path":"/reference/sample_unit_simplex2.html","id":null,"dir":"Reference","previous_headings":"","what":"Return a random sample from the d unit simplex — sample_unit_simplex2","title":"Return a random sample from the d unit simplex — sample_unit_simplex2","text":"Return random sample d unit simplex","code":""},{"path":"/reference/sample_unit_simplex2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return a random sample from the d unit simplex — sample_unit_simplex2","text":"","code":"sample_unit_simplex2(d)"},{"path":"/reference/sample_unit_simplexn.html","id":null,"dir":"Reference","previous_headings":"","what":"Return n random samples from the d unit simplex — sample_unit_simplexn","title":"Return n random samples from the d unit simplex — sample_unit_simplexn","text":"Return n random samples d unit simplex","code":""},{"path":"/reference/sample_unit_simplexn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return n random samples from the d unit simplex — sample_unit_simplexn","text":"","code":"sample_unit_simplexn(d, n)"},{"path":"/reference/sspace_multinom.html","id":null,"dir":"Reference","previous_headings":"","what":"Enumerate the sample space of a multinomial — sspace_multinom","title":"Enumerate the sample space of a multinomial — sspace_multinom","text":"\\(d\\) mutually exclusive outcomes \\(n\\) independent trials. function enumerates possible vectors length \\(d\\) counts outcome \\(n\\) trials, .e., sample space. result output matrix \\(d\\) columns row represents possible observation.","code":""},{"path":"/reference/sspace_multinom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Enumerate the sample space of a multinomial — sspace_multinom","text":"","code":"sspace_multinom(d, n)"},{"path":"/reference/sspace_multinom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Enumerate the sample space of a multinomial — sspace_multinom","text":"d Dimension n Size","code":""},{"path":"/reference/sspace_multinom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Enumerate the sample space of a multinomial — sspace_multinom","text":"matrix d columns","code":""},{"path":"/reference/sspace_multinom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Enumerate the sample space of a multinomial — sspace_multinom","text":"","code":"d4s <- sspace_multinom(4, 8) stopifnot(abs(sum(apply(d4s, 1, dmultinom, prob = rep(.25, 4))) - 1) < 1e-12)"},{"path":"/reference/xactonomial-package.html","id":null,"dir":"Reference","previous_headings":"","what":"xactonomial: Exact Inference for Real-Valued Functionals of k-Sample Multinomial Parameters — xactonomial-package","title":"xactonomial: Exact Inference for Real-Valued Functionals of k-Sample Multinomial Parameters — xactonomial-package","text":"consider k sample multinomial problem observe k vectors (possibly different lengths), representing independent multinomial random vector. given function psi takes concatenated vector multinomial probabilities outputs real number, Monte Carlo estimation procedure exact p-value confidence interval. resulting inference valid even small samples, parameter boundary, function nondifferentiable parameter value, situations asymptotic methods bootstrap fail.","code":""},{"path":[]},{"path":"/reference/xactonomial-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"xactonomial: Exact Inference for Real-Valued Functionals of k-Sample Multinomial Parameters — xactonomial-package","text":"Maintainer: Michael C Sachs sachsmc@gmail.com Authors: Michael P Fay","code":""},{"path":"/reference/xactonomial.html","id":null,"dir":"Reference","previous_headings":"","what":"Exact inference for a real-valued function of multinomial parameters — xactonomial","title":"Exact inference for a real-valued function of multinomial parameters — xactonomial","text":"consider k sample multinomial problem observe k vectors (possibly different lengths), representing independent sample multinomial. given function psi takes concatenated vector multinomial probabilities outputs real number, interested constructing confidence interval psi.","code":""},{"path":"/reference/xactonomial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exact inference for a real-valued function of multinomial parameters — xactonomial","text":"","code":"xactonomial(   psi,   data,   psi0 = NULL,   alternative = c(\"two.sided\", \"less\", \"greater\"),   alpha = 0.05,   psi_limits,   maxit = 50,   chunksize = 500,   conf.int = TRUE,   psi_is_vectorized = FALSE )"},{"path":"/reference/xactonomial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exact inference for a real-valued function of multinomial parameters — xactonomial","text":"psi Function takes vector parameters outputs real valued number data list k elements representing vectors counts k-sample multinomial psi0 null hypothesis value parameter tested. p value test psi <= psi0 computed. NULL confidence interval computed. alternative character string specifying alternative hypothesis, must one \"two.sided\" (default), \"greater\" \"less\" alpha 1 - alpha percent confidence interval computed psi_limits vector length 2 giving lower upper limits range \\(\\psi(\\theta)\\) maxit Maximum number iterations stochastic procedure chunksize number samples taken parameter space iteration conf.int Logical. FALSE, confidence interval calculated, p-value. psi_is_vectorized Logical. TRUE, expect psi can take matrix input, return vector length number rows, computing statistic row matrix. possible, substantially speed computation. See examples.","code":""},{"path":"/reference/xactonomial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Exact inference for a real-valued function of multinomial parameters — xactonomial","text":"list 3 elements: estimate, 1 - alpha percent   confidence interval, p-value","code":""},{"path":"/reference/xactonomial.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Exact inference for a real-valued function of multinomial parameters — xactonomial","text":"Let \\(T_j\\) distributed \\(\\mbox{Multinomial}_{d_j}(\\boldsymbol{\\theta}_j, n_j)\\) \\(j = 1, \\ldots, k\\) denote \\(\\boldsymbol{T} = (T_1, \\ldots, T_k)\\) \\(\\boldsymbol{\\theta} = (\\theta_1, \\ldots, \\theta_k)\\). subscript \\(d_j\\) denotes dimension multinomial. Suppose one interested parameter \\(\\psi(\\boldsymbol{\\theta}) \\\\Theta \\subseteq \\mathbb{R}\\). Given sample size \\(n\\) \\(\\boldsymbol{T}\\), one can estimate \\(\\boldsymbol{\\theta}\\) sample proportions \\(\\hat{\\boldsymbol{\\theta}}\\) hence \\(\\pi(\\hat{\\boldsymbol{\\theta}})\\). function constructs \\(1 - \\alpha\\) percent confidence interval \\(\\psi(\\boldsymbol{\\theta})\\) provides function calculate p value test null hypothesis \\(H_0: \\psi(\\boldsymbol{\\theta}) \\neq \\psi_0\\) two sided case, \\(H_0: \\psi(\\boldsymbol{\\theta}) \\leq \\psi_0\\) case alternative = \"greater\", \\(H_0: \\psi(\\boldsymbol{\\theta}) \\geq \\psi_0\\) case alternative = \"less\". make assumptions rely large sample approximations. computation somewhat involved best small sample sizes.","code":""},{"path":"/reference/xactonomial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Exact inference for a real-valued function of multinomial parameters — xactonomial","text":"","code":"psi_ba <- function(theta) {   theta1 <- theta[1:4]   theta2 <- theta[5:8]   sum(sqrt(theta1 * theta2))   } data <- list(T1 = c(2,1,2,1), T2 = c(0,1,3,3)) xactonomial(psi_ba, data, psi_limits = c(0, 1), maxit = 5, chunksize = 20) #> $estimate #> [1] 0.7995291 #>  #> $conf.int #> [1] 0.5975000 0.9970571 #>  #> $p.value #> [1] NA #>   psi_ba_v <- function(theta) { theta1 <- theta[,1:4, drop = FALSE] theta2 <- theta[,5:8, drop = FALSE] rowSums(sqrt(theta1 * theta2)) } data <- list(T1 = c(2,1,2,1), T2 = c(0,1,3,3)) xactonomial(psi_ba_v, data, psi_limits = c(0, 1), maxit = 5, chunksize = 20, psi_is_vectorized = TRUE) #> $estimate #> [1] 0.7995291 #>  #> $conf.int #> [1] 0.6225000 0.9922135 #>  #> $p.value #> [1] NA #>"},{"path":"/news/index.html","id":"xactonomial-041","dir":"Changelog","previous_headings":"","what":"xactonomial 0.4.1","title":"xactonomial 0.4.1","text":"Speedups Seeding seed works reproducibility","code":""},{"path":"/news/index.html","id":"xactonomial-030","dir":"Changelog","previous_headings":"","what":"xactonomial 0.3.0","title":"xactonomial 0.3.0","text":"Cleanup bugfixes","code":""},{"path":"/news/index.html","id":"xactonomial-020","dir":"Changelog","previous_headings":"","what":"xactonomial 0.2.0","title":"xactonomial 0.2.0","text":"substantial speedups implementing things Rust using rextendr","code":""},{"path":"/news/index.html","id":"xactonomial-010","dir":"Changelog","previous_headings":"","what":"xactonomial 0.1.0","title":"xactonomial 0.1.0","text":"Initial release.","code":""}]
